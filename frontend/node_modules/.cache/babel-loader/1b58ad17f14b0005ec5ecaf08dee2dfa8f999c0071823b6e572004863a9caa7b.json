{"ast":null,"code":"// frontend/src/services/api.ts\n\nimport axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.token = null;\n    this.api = axios.create({\n      // Base URL should point to your backend root (no `/api` here)\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Attach auth token if present\n    this.api.interceptors.request.use(config => {\n      if (this.token) {\n        config.headers['Authorization'] = `Bearer ${this.token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Global response handler\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        this.clearAuth();\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // --------------------\n  // Authentication\n  // --------------------\n  setAuthToken(token) {\n    this.token = token;\n    localStorage.setItem('authToken', token);\n  }\n  clearAuth() {\n    this.token = null;\n    localStorage.removeItem('authToken');\n  }\n\n  // --------------------\n  // Search Endpoints\n  // --------------------\n  async uploadDocuments(files) {\n    const formData = new FormData();\n    files.forEach(file => formData.append('files', file));\n    const response = await this.api.post('/api/search/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async searchDocuments(query, filters) {\n    const response = await this.api.post('/api/search/query', {\n      query,\n      filters\n    });\n    return response.data;\n  }\n  async getDocumentFields(documentIds) {\n    const params = documentIds ? {\n      documentIds: documentIds.join(',')\n    } : {};\n    const response = await this.api.get('/api/search/documents', {\n      params\n    });\n    return response.data;\n  }\n  async updateField(documentId, field, value) {\n    const response = await this.api.put(`/api/search/document/${documentId}/field`, {\n      field,\n      value\n    });\n    return response.data;\n  }\n  async deleteDocument(documentId) {\n    const response = await this.api.delete(`/api/search/document/${documentId}`);\n    return response.data;\n  }\n  async exportTable(format, documentIds) {\n    const params = {\n      format,\n      ...(documentIds && {\n        documentIds: documentIds.join(',')\n      })\n    };\n    const response = await this.api.get('/api/search/export', {\n      params,\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // --------------------\n  // Automate Endpoints\n  // --------------------\n  async generateRenovationROI(documentIds, targetROI, budgetCap) {\n    const response = await this.api.post('/api/automate/renovation-roi', {\n      documentIds,\n      targetROI,\n      budgetCap\n    });\n    return response.data;\n  }\n  async executeGCMatch(scopeId, startDate, zipCode) {\n    const response = await this.api.post('/api/automate/gc-match', {\n      scopeId,\n      startDate,\n      zipCode\n    });\n    return response.data;\n  }\n  async downloadReport(filename) {\n    const response = await this.api.get(`/api/automate/download/${filename}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n  async getRehabHistory(propertyId) {\n    const params = propertyId ? {\n      propertyId\n    } : {};\n    const response = await this.api.get('/api/automate/history', {\n      params\n    });\n    return response.data;\n  }\n\n  // --------------------\n  // Snapshot Endpoints\n  // --------------------\n  async generateFactSheet(documentIds, rehabScopeId) {\n    const response = await this.api.post('/api/snapshot/fact-sheet', {\n      documentIds,\n      rehabScopeId\n    });\n    return response.data;\n  }\n  async quickSnapshot(address) {\n    const response = await this.api.post('/api/snapshot/quick', {\n      address\n    });\n    return response.data;\n  }\n  async getFactSheetHistory(propertyId) {\n    const params = propertyId ? {\n      propertyId\n    } : {};\n    const response = await this.api.get('/api/snapshot/history', {\n      params\n    });\n    return response.data;\n  }\n\n  // --------------------\n  // Chat Endpoints\n  // --------------------\n  async sendChatMessage(conversationId, message) {\n    const response = await this.api.post('/api/chat/message', {\n      conversationId,\n      message\n    });\n    return response.data;\n  }\n  async getConversationHistory(conversationId) {\n    const response = await this.api.get(`/api/chat/conversation/${conversationId}`);\n    return response.data;\n  }\n  async getSimilarQuestions(query) {\n    const response = await this.api.post('/api/chat/similar-questions', {\n      query\n    });\n    return response.data;\n  }\n  async clearConversation(conversationId) {\n    const response = await this.api.delete(`/api/chat/conversation/${conversationId}`);\n    return response.data;\n  }\n\n  // --------------------\n  // User Endpoints\n  // --------------------\n  async getLapisUsage() {\n    const response = await this.api.get('/api/user/lapis-usage');\n    return response.data;\n  }\n  async topUpLapis(amount) {\n    const response = await this.api.post('/api/user/top-up', {\n      amount\n    });\n    return response.data;\n  }\n  async upgradeSubscription(plan) {\n    const response = await this.api.post('/api/user/upgrade', {\n      plan\n    });\n    return response.data;\n  }\n\n  // --------------------\n  // Utility\n  // --------------------\n  async healthCheck() {\n    const response = await this.api.get('/health');\n    return response.data;\n  }\n  downloadFile(blob, filename) {\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","ApiService","constructor","api","token","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","error","Promise","reject","response","_error$response","status","clearAuth","window","location","href","setAuthToken","localStorage","setItem","removeItem","uploadDocuments","files","formData","FormData","forEach","file","append","post","data","searchDocuments","query","filters","getDocumentFields","documentIds","params","join","get","updateField","documentId","field","value","put","deleteDocument","delete","exportTable","format","responseType","generateRenovationROI","targetROI","budgetCap","executeGCMatch","scopeId","startDate","zipCode","downloadReport","filename","getRehabHistory","propertyId","generateFactSheet","rehabScopeId","quickSnapshot","address","getFactSheetHistory","sendChatMessage","conversationId","message","getConversationHistory","getSimilarQuestions","clearConversation","getLapisUsage","topUpLapis","amount","upgradeSubscription","plan","healthCheck","downloadFile","blob","url","URL","createObjectURL","link","document","createElement","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["E:/tripilot-real-estate(29-june)/frontend/src/services/api.ts"],"sourcesContent":["// frontend/src/services/api.ts\r\n\r\nimport axios, { AxiosInstance, AxiosError } from 'axios';\r\nimport {\r\n  Document,\r\n  RehabScope,\r\n  Contractor,\r\n  FactSheet,\r\n  ChatMessage,\r\n  ApiResponse,\r\n  UploadResponse,\r\n  SearchResponse,\r\n  ChatResponse,\r\n  LapisUsage\r\n} from '../../../shared/types';\r\n\r\nclass ApiService {\r\n  private api: AxiosInstance;\r\n  private token: string | null = null;\r\n\r\n  constructor() {\r\n    this.api = axios.create({\r\n      // Base URL should point to your backend root (no `/api` here)\r\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    // Attach auth token if present\r\n    this.api.interceptors.request.use(\r\n      config => {\r\n        if (this.token) {\r\n          config.headers!['Authorization'] = `Bearer ${this.token}`;\r\n        }\r\n        return config;\r\n      },\r\n      error => Promise.reject(error)\r\n    );\r\n\r\n    // Global response handler\r\n    this.api.interceptors.response.use(\r\n      response => response,\r\n      (error: AxiosError) => {\r\n        if (error.response?.status === 401) {\r\n          this.clearAuth();\r\n          window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // --------------------\r\n  // Authentication\r\n  // --------------------\r\n  setAuthToken(token: string) {\r\n    this.token = token;\r\n    localStorage.setItem('authToken', token);\r\n  }\r\n\r\n  clearAuth() {\r\n    this.token = null;\r\n    localStorage.removeItem('authToken');\r\n  }\r\n\r\n  // --------------------\r\n  // Search Endpoints\r\n  // --------------------\r\n  async uploadDocuments(files: File[]): Promise<UploadResponse> {\r\n    const formData = new FormData();\r\n    files.forEach(file => formData.append('files', file));\r\n\r\n    const response = await this.api.post<UploadResponse>(\r\n      '/api/search/upload',\r\n      formData,\r\n      {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async searchDocuments(query: string, filters?: any): Promise<SearchResponse> {\r\n    const response = await this.api.post<SearchResponse>(\r\n      '/api/search/query',\r\n      { query, filters }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getDocumentFields(documentIds?: string[]): Promise<ApiResponse<any>> {\r\n    const params = documentIds ? { documentIds: documentIds.join(',') } : {};\r\n    const response = await this.api.get<ApiResponse<any>>(\r\n      '/api/search/documents',\r\n      { params }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async updateField(\r\n    documentId: string,\r\n    field: string,\r\n    value: any\r\n  ): Promise<ApiResponse<void>> {\r\n    const response = await this.api.put<ApiResponse<void>>(\r\n      `/api/search/document/${documentId}/field`,\r\n      { field, value }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDocument(documentId: string): Promise<ApiResponse<void>> {\r\n    const response = await this.api.delete<ApiResponse<void>>(\r\n      `/api/search/document/${documentId}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async exportTable(\r\n    format: string,\r\n    documentIds?: string[]\r\n  ): Promise<Blob> {\r\n    const params = {\r\n      format,\r\n      ...(documentIds && { documentIds: documentIds.join(',') })\r\n    };\r\n    const response = await this.api.get<Blob>(\r\n      '/api/search/export',\r\n      { params, responseType: 'blob' }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // Automate Endpoints\r\n  // --------------------\r\n  async generateRenovationROI(\r\n    documentIds: string[],\r\n    targetROI: number,\r\n    budgetCap: number\r\n  ): Promise<{ rehabScope: RehabScope; roi: number; downloadUrl: string }> {\r\n    const response = await this.api.post(\r\n      '/api/automate/renovation-roi',\r\n      { documentIds, targetROI, budgetCap }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async executeGCMatch(\r\n    scopeId: string,\r\n    startDate: string,\r\n    zipCode: string\r\n  ): Promise<{ matchedContractors: Contractor[]; rfpResults: any[] }> {\r\n    const response = await this.api.post(\r\n      '/api/automate/gc-match',\r\n      { scopeId, startDate, zipCode }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async downloadReport(filename: string): Promise<Blob> {\r\n    const response = await this.api.get<Blob>(\r\n      `/api/automate/download/${filename}`,\r\n      { responseType: 'blob' }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getRehabHistory(propertyId?: string): Promise<ApiResponse<any>> {\r\n    const params = propertyId ? { propertyId } : {};\r\n    const response = await this.api.get<ApiResponse<any>>(\r\n      '/api/automate/history',\r\n      { params }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // Snapshot Endpoints\r\n  // --------------------\r\n  async generateFactSheet(\r\n    documentIds: string[],\r\n    rehabScopeId?: string\r\n  ): Promise<{ factSheet: FactSheet; downloadUrl: string }> {\r\n    const response = await this.api.post(\r\n      '/api/snapshot/fact-sheet',\r\n      { documentIds, rehabScopeId }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async quickSnapshot(address: string): Promise<ApiResponse<any>> {\r\n    const response = await this.api.post<ApiResponse<any>>(\r\n      '/api/snapshot/quick',\r\n      { address }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getFactSheetHistory(propertyId?: string): Promise<ApiResponse<any>> {\r\n    const params = propertyId ? { propertyId } : {};\r\n    const response = await this.api.get<ApiResponse<any>>(\r\n      '/api/snapshot/history',\r\n      { params }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // Chat Endpoints\r\n  // --------------------\r\n  async sendChatMessage(\r\n    conversationId: string,\r\n    message: string\r\n  ): Promise<ChatResponse> {\r\n    const response = await this.api.post<ChatResponse>(\r\n      '/api/chat/message',\r\n      { conversationId, message }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getConversationHistory(conversationId: string): Promise<ApiResponse<any>> {\r\n    const response = await this.api.get<ApiResponse<any>>(\r\n      `/api/chat/conversation/${conversationId}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getSimilarQuestions(query: string): Promise<ApiResponse<any>> {\r\n    const response = await this.api.post<ApiResponse<any>>(\r\n      '/api/chat/similar-questions',\r\n      { query }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async clearConversation(conversationId: string): Promise<ApiResponse<void>> {\r\n    const response = await this.api.delete<ApiResponse<void>>(\r\n      `/api/chat/conversation/${conversationId}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // User Endpoints\r\n  // --------------------\r\n  async getLapisUsage(): Promise<LapisUsage> {\r\n    const response = await this.api.get<LapisUsage>(\r\n      '/api/user/lapis-usage'\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async topUpLapis(amount: number): Promise<ApiResponse<any>> {\r\n    const response = await this.api.post<ApiResponse<any>>(\r\n      '/api/user/top-up',\r\n      { amount }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async upgradeSubscription(plan: string): Promise<ApiResponse<any>> {\r\n    const response = await this.api.post<ApiResponse<any>>(\r\n      '/api/user/upgrade',\r\n      { plan }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // Utility\r\n  // --------------------\r\n  async healthCheck(): Promise<{ status: string }> {\r\n    const response = await this.api.get<{ status: string }>('/health');\r\n    return response.data;\r\n  }\r\n\r\n  downloadFile(blob: Blob, filename: string) {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}