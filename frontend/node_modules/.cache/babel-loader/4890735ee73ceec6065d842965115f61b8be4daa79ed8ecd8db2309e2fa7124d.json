{"ast":null,"code":"// frontend/src/services/api.ts - UPDATED VERSION\n\nimport axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.token = null;\n    this.api = axios.create({\n      // FIXED: Base URL points to backend with /api prefix\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      timeout: 30000 // Add timeout\n    });\n\n    // Load token from localStorage on init\n    this.token = localStorage.getItem('authToken');\n\n    // Attach auth token if present\n    this.api.interceptors.request.use(config => {\n      if (this.token) {\n        config.headers['Authorization'] = `Bearer ${this.token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Global response handler\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        this.clearAuth();\n        // Don't redirect in development\n        if (process.env.NODE_ENV === 'production') {\n          window.location.href = '/login';\n        }\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // --------------------\n  // Authentication\n  // --------------------\n  setAuthToken(token) {\n    this.token = token;\n    localStorage.setItem('authToken', token);\n  }\n  clearAuth() {\n    this.token = null;\n    localStorage.removeItem('authToken');\n  }\n\n  // --------------------\n  // Search Endpoints\n  // --------------------\n  async uploadDocuments(files) {\n    const formData = new FormData();\n    files.forEach(file => formData.append('files', file));\n    const response = await this.api.post('/search/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async searchDocuments(query, filters) {\n    const response = await this.api.post('/search/query', {\n      query,\n      filters\n    });\n    return response.data;\n  }\n  async getDocumentFields(documentIds) {\n    const params = documentIds ? {\n      documentIds: documentIds.join(',')\n    } : {};\n    const response = await this.api.get('/search/documents', {\n      params\n    });\n    // currently returns { success, documents, columns, total }\n    // so unwrap `documents`:\n    return {\n      rows: response.data.documents,\n      // ← pull out documents\n      columns: response.data.columns,\n      total: response.data.total\n    };\n  }\n  async updateField(documentId, field, value) {\n    const response = await this.api.put(`/search/document/${documentId}/field`, {\n      field,\n      value\n    });\n    return response.data;\n  }\n  async deleteDocument(documentId) {\n    const response = await this.api.delete(`/search/document/${documentId}`);\n    return response.data;\n  }\n  async exportTable(format, documentIds) {\n    const params = {\n      format,\n      ...(documentIds && {\n        documentIds: documentIds.join(',')\n      })\n    };\n    const response = await this.api.get('/search/export', {\n      params,\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // --------------------\n  // Automate Endpoints\n  // --------------------\n  async generateRenovationROI(documentIds, targetROI = 15, budgetCap = 100000) {\n    const response = await this.api.post('/automate/renovation-roi', {\n      documentIds,\n      targetROI,\n      budgetCap\n    });\n    return response.data;\n  }\n  async executeGCMatch(scopeId, startDate, zipCode) {\n    const response = await this.api.post('/automate/gc-match', {\n      scopeId,\n      startDate,\n      zipCode\n    });\n    return response.data;\n  }\n  async downloadReport(filename) {\n    const response = await this.api.get(`/automate/download/${filename}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n  async getRehabHistory(propertyId) {\n    const params = propertyId ? {\n      propertyId\n    } : {};\n    const response = await this.api.get('/automate/history', {\n      params\n    });\n    return response.data;\n  }\n\n  // --------------------\n  // Snapshot Endpoints\n  // --------------------\n  async generateFactSheet(documentIds, rehabScopeId) {\n    const response = await this.api.post('/snapshot/fact-sheet', {\n      documentIds,\n      rehabScopeId\n    });\n    return response.data;\n  }\n  async quickSnapshot(address) {\n    const response = await this.api.post('/snapshot/quick', {\n      address\n    });\n    return response.data;\n  }\n  async getFactSheetHistory(propertyId) {\n    const params = propertyId ? {\n      propertyId\n    } : {};\n    const response = await this.api.get('/snapshot/history', {\n      params\n    });\n    return response.data;\n  }\n\n  // --------------------\n  // Chat Endpoints\n  // --------------------\n  async sendChatMessage(conversationId, message) {\n    const response = await this.api.post('/chat/message', {\n      conversationId,\n      message\n    });\n    return response.data;\n  }\n  async getConversationHistory(conversationId) {\n    const response = await this.api.get(`/chat/conversation/${conversationId}`);\n    return response.data;\n  }\n  async getSimilarQuestions(query) {\n    const response = await this.api.post('/chat/similar-questions', {\n      query\n    });\n    return response.data;\n  }\n  async clearConversation(conversationId) {\n    const response = await this.api.delete(`/chat/conversation/${conversationId}`);\n    return response.data;\n  }\n\n  // --------------------\n  // User Endpoints (MISSING - NEED TO ADD TO BACKEND)\n  // --------------------\n  async getLapisUsage() {\n    const response = await this.api.get('/user/lapis-usage');\n    return response.data;\n  }\n  async runAutomation(documentIds) {\n    // replace endpoint & body shape to match your backend!\n    const payload = {\n      documentIds\n    };\n    const resp = await api.post('/automate/renovation-roi', payload);\n    return resp.data;\n  }\n  async topUpLapis(amount) {\n    const response = await this.api.post('/user/top-up', {\n      amount\n    });\n    return response.data;\n  }\n  async upgradeSubscription(plan) {\n    const response = await this.api.post('/user/upgrade', {\n      plan\n    });\n    return response.data;\n  }\n\n  // --------------------\n  // Utility\n  // --------------------\n  async healthCheck() {\n    const response = await this.api.get('/health');\n    return response.data;\n  }\n  downloadFile(blob, filename) {\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["axios","ApiService","constructor","api","token","create","baseURL","process","env","REACT_APP_API_URL","headers","timeout","localStorage","getItem","interceptors","request","use","config","error","Promise","reject","response","_error$response","status","clearAuth","NODE_ENV","window","location","href","setAuthToken","setItem","removeItem","uploadDocuments","files","formData","FormData","forEach","file","append","post","data","searchDocuments","query","filters","getDocumentFields","documentIds","params","join","get","rows","documents","columns","total","updateField","documentId","field","value","put","deleteDocument","delete","exportTable","format","responseType","generateRenovationROI","targetROI","budgetCap","executeGCMatch","scopeId","startDate","zipCode","downloadReport","filename","getRehabHistory","propertyId","generateFactSheet","rehabScopeId","quickSnapshot","address","getFactSheetHistory","sendChatMessage","conversationId","message","getConversationHistory","getSimilarQuestions","clearConversation","getLapisUsage","runAutomation","payload","resp","topUpLapis","amount","upgradeSubscription","plan","healthCheck","downloadFile","blob","url","URL","createObjectURL","link","document","createElement","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["E:/tripilot-real-estate(29-june)/frontend/src/services/api.ts"],"sourcesContent":["// frontend/src/services/api.ts - UPDATED VERSION\r\n\r\nimport axios, { AxiosInstance, AxiosError } from 'axios';\r\nimport {\r\n  Document,\r\n  RehabScope,\r\n  Contractor,\r\n  FactSheet,\r\n  ChatMessage,\r\n  ApiResponse,\r\n  UploadResponse,\r\n  SearchResponse,\r\n  ChatResponse,\r\n  LapisUsage\r\n} from '../../../shared/types';\r\n\r\nclass ApiService {\r\n  private api: AxiosInstance;\r\n  private token: string | null = null;\r\n\r\n  constructor() {\r\n    this.api = axios.create({\r\n      // FIXED: Base URL points to backend with /api prefix\r\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      timeout: 30000 // Add timeout\r\n    });\r\n\r\n    // Load token from localStorage on init\r\n    this.token = localStorage.getItem('authToken');\r\n\r\n    // Attach auth token if present\r\n    this.api.interceptors.request.use(\r\n      config => {\r\n        if (this.token) {\r\n          config.headers!['Authorization'] = `Bearer ${this.token}`;\r\n        }\r\n        return config;\r\n      },\r\n      error => Promise.reject(error)\r\n    );\r\n\r\n    // Global response handler\r\n    this.api.interceptors.response.use(\r\n      response => response,\r\n      (error: AxiosError) => {\r\n        if (error.response?.status === 401) {\r\n          this.clearAuth();\r\n          // Don't redirect in development\r\n          if (process.env.NODE_ENV === 'production') {\r\n            window.location.href = '/login';\r\n          }\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // --------------------\r\n  // Authentication\r\n  // --------------------\r\n  setAuthToken(token: string) {\r\n    this.token = token;\r\n    localStorage.setItem('authToken', token);\r\n  }\r\n\r\n  clearAuth() {\r\n    this.token = null;\r\n    localStorage.removeItem('authToken');\r\n  }\r\n\r\n  // --------------------\r\n  // Search Endpoints\r\n  // --------------------\r\n  async uploadDocuments(files: File[]): Promise<UploadResponse> {\r\n    const formData = new FormData();\r\n    files.forEach(file => formData.append('files', file));\r\n\r\n    const response = await this.api.post<UploadResponse>(\r\n      '/search/upload',\r\n      formData,\r\n      {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async searchDocuments(query: string, filters?: any): Promise<SearchResponse> {\r\n    const response = await this.api.post<SearchResponse>(\r\n      '/search/query',\r\n      { query, filters }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\nasync getDocumentFields(documentIds?: string[]): Promise<any> {\r\n  const params = documentIds ? { documentIds: documentIds.join(',') } : {};\r\n  const response = await this.api.get('/search/documents', { params });\r\n  // currently returns { success, documents, columns, total }\r\n  // so unwrap `documents`:\r\n  return {\r\n    rows: response.data.documents,  // ← pull out documents\r\n    columns: response.data.columns,\r\n    total: response.data.total\r\n  };\r\n}\r\n\r\n  async updateField(\r\n    documentId: string,\r\n    field: string,\r\n    value: any\r\n  ): Promise<ApiResponse<void>> {\r\n    const response = await this.api.put<ApiResponse<void>>(\r\n      `/search/document/${documentId}/field`,\r\n      { field, value }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDocument(documentId: string): Promise<ApiResponse<void>> {\r\n    const response = await this.api.delete<ApiResponse<void>>(\r\n      `/search/document/${documentId}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async exportTable(\r\n    format: string,\r\n    documentIds?: string[]\r\n  ): Promise<Blob> {\r\n    const params = {\r\n      format,\r\n      ...(documentIds && { documentIds: documentIds.join(',') })\r\n    };\r\n    const response = await this.api.get<Blob>(\r\n      '/search/export',\r\n      { params, responseType: 'blob' }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // Automate Endpoints\r\n  // --------------------\r\n  async generateRenovationROI(\r\n    documentIds: string[],\r\n    targetROI: number = 15,\r\n    budgetCap: number = 100000\r\n  ): Promise<{ rehabScope: RehabScope; roi: number; downloadUrl: string }> {\r\n    const response = await this.api.post(\r\n      '/automate/renovation-roi',\r\n      { documentIds, targetROI, budgetCap }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async executeGCMatch(\r\n    scopeId: string,\r\n    startDate: string,\r\n    zipCode: string\r\n  ): Promise<{ matchedContractors: Contractor[]; rfpResults: any[] }> {\r\n    const response = await this.api.post(\r\n      '/automate/gc-match',\r\n      { scopeId, startDate, zipCode }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async downloadReport(filename: string): Promise<Blob> {\r\n    const response = await this.api.get<Blob>(\r\n      `/automate/download/${filename}`,\r\n      { responseType: 'blob' }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getRehabHistory(propertyId?: string): Promise<ApiResponse<any>> {\r\n    const params = propertyId ? { propertyId } : {};\r\n    const response = await this.api.get<ApiResponse<any>>(\r\n      '/automate/history',\r\n      { params }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // Snapshot Endpoints\r\n  // --------------------\r\n  async generateFactSheet(\r\n    documentIds: string[],\r\n    rehabScopeId?: string\r\n  ): Promise<{ factSheet: FactSheet; downloadUrl: string }> {\r\n    const response = await this.api.post(\r\n      '/snapshot/fact-sheet',\r\n      { documentIds, rehabScopeId }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async quickSnapshot(address: string): Promise<ApiResponse<any>> {\r\n    const response = await this.api.post<ApiResponse<any>>(\r\n      '/snapshot/quick',\r\n      { address }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getFactSheetHistory(propertyId?: string): Promise<ApiResponse<any>> {\r\n    const params = propertyId ? { propertyId } : {};\r\n    const response = await this.api.get<ApiResponse<any>>(\r\n      '/snapshot/history',\r\n      { params }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // Chat Endpoints\r\n  // --------------------\r\n  async sendChatMessage(\r\n    conversationId: string,\r\n    message: string\r\n  ): Promise<ChatResponse> {\r\n    const response = await this.api.post<ChatResponse>(\r\n      '/chat/message',\r\n      { conversationId, message }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getConversationHistory(conversationId: string): Promise<ApiResponse<any>> {\r\n    const response = await this.api.get<ApiResponse<any>>(\r\n      `/chat/conversation/${conversationId}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async getSimilarQuestions(query: string): Promise<ApiResponse<any>> {\r\n    const response = await this.api.post<ApiResponse<any>>(\r\n      '/chat/similar-questions',\r\n      { query }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async clearConversation(conversationId: string): Promise<ApiResponse<void>> {\r\n    const response = await this.api.delete<ApiResponse<void>>(\r\n      `/chat/conversation/${conversationId}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // User Endpoints (MISSING - NEED TO ADD TO BACKEND)\r\n  // --------------------\r\n  async getLapisUsage(): Promise<LapisUsage> {\r\n    const response = await this.api.get<LapisUsage>(\r\n      '/user/lapis-usage'\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n    async runAutomation(documentIds: string[]) {\r\n    // replace endpoint & body shape to match your backend!\r\n    const payload = { documentIds };\r\n    const resp = await api.post('/automate/renovation-roi', payload);\r\n    return resp.data;\r\n  }\r\n  async topUpLapis(amount: number): Promise<ApiResponse<any>> {\r\n    const response = await this.api.post<ApiResponse<any>>(\r\n      '/user/top-up',\r\n      { amount }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async upgradeSubscription(plan: string): Promise<ApiResponse<any>> {\r\n    const response = await this.api.post<ApiResponse<any>>(\r\n      '/user/upgrade',\r\n      { plan }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // --------------------\r\n  // Utility\r\n  // --------------------\r\n  async healthCheck(): Promise<{ status: string }> {\r\n    const response = await this.api.get<{ status: string }>('/health');\r\n    return response.data;\r\n  }\r\n\r\n  downloadFile(blob: Blob, filename: string) {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n}\r\n\r\nexport default new ApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}